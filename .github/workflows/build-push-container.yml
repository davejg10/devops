name: build-push-container-to-acr
run-name: Build & Push ${{ github.event.inputs.dockerfile_dir }} to ACR

on:
  workflow_dispatch:
    inputs:
      image_name:
        type: choice
        description: Image name
        options: 
          - github-runners
      runners:
        type: choice
        description: Github runner type
        default: self-hosted
        options: 
          - ubuntu-latest
          - self-hosted

env:
  ACR_NAME: acrglbuksdevopsutils
  ACR_SERVER_NAME: acrglbuksdevopsutils.azurecr.io
  TAG: ${{ github.run_number }}

permissions:
  id-token: write

jobs:
  build_and_push:
    runs-on: ${{ github.event.inputs.runners }}
    environment: glb
    defaults:
      run:
        working-directory: ./images/${{ github.event.inputs.image_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Build ${{ github.event.inputs.image_name }} (in ACR)
        run: |
          # az acr build actually copies the files to the ACR and its built there...
          az acr build \
            --registry ${{ env.ACR_SERVER_NAME }} \
            --image "${{ github.event.inputs.image_name }}:${{ env.TAG }}" \
            --build-arg build_version=${{ env.TAG }} .

          # Also tag with latest
          az acr import --name ${{ env.ACR_SERVER_NAME }} --source "${{ env.ACR_SERVER_NAME }}/${{ github.event.inputs.image_name }}:${{ env.TAG }}" --image ${{ github.event.inputs.image_name }}:latest --force