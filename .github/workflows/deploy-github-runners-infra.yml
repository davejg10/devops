name: deploy-githubrunners-infra
run-name: Terraform deploy ${{ github.event.inputs.app_name }} in ${{ github.event.inputs.environment }}

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: Environment
        options: 
          - glb
      app_name:
        type: choice
        description: Application name
        options: 
          - ghrunners
    
env:
 ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
 ARM_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
 ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
 ARM_USE_AZUREAD: true
 work_dir: ./iac/${{ github.event.inputs.app_name }}

permissions:
  id-token: write
  contents: read

jobs:
  terraform_plan:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    defaults:
      run:
        working-directory: ${{ env.work_dir }}
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        run: |
          terraform init -input=false \
            -backend-config="resource_group_name=${{ vars.BACKEND_AZURE_RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ vars.BACKEND_AZURE_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ github.event.inputs.app_name }}"
      
      - name: Terraform Validate
        run: terraform validate

      - name: Generate access token
        id: generate-access-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      
      - name: Create a secret in Azure Key Vault
        run: |
          # Insert the secret into the Key Vault
          az keyvault secret set --vault-name kv-glb-uks-devoputils --name 'github-app-key' --value ${{ steps.generate-access-token.outputs.token  }}

          # Fetch the URI of the created secret
          # SECRET_URI=$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name $SECRET_NAME --query "id" -o tsv)

          # echo "Secret URI: $SECRET_URI"

      - name: Terraform plan
        run: |
          terraform plan -input=false \
            -VAR "github_access_token_secret_name=${{ vars.github_access_token_secret_name }}" \
            -var "github_installation_id=${{ vars.GH_INSTALLATION_ID }}" \
            -var "github_app_id=${{ vars.GH_APP_ID }}" \
            -var-file="tfvars/${{ github.event.inputs.environment }}/main.tfvars" \
            -out ${{ github.run_number }}-${{ github.event.inputs.environment }}.tfplan
      
      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ github.event.inputs.environment }}
          path: ${{ env.work_dir }}/${{ github.run_number }}-${{ github.event.inputs.environment }}.tfplan
      
  terraform_apply:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: terraform_plan
    defaults:
      run:
        working-directory: ${{ env.work_dir }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ github.event.inputs.environment }}
          path: ${{ env.work_dir }}

      - uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        run: |
          terraform init -input=false \
            -backend-config="resource_group_name=${{ vars.BACKEND_AZURE_RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ vars.BACKEND_AZURE_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ github.event.inputs.app_name }}"

      - name: Terraform apply
        run: terraform apply -lock-timeout=300s ${{ github.run_number }}-${{ github.event.inputs.environment }}.tfplan